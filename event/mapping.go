package event

import (
	"reflect"
)

var (
	eventTypeMap = map[string]reflect.Type{
		"accounts_changed":                reflect.TypeOf(&AccountsChanged{}).Elem(),
		"app_home_opened":                 reflect.TypeOf(&AppHomeOpened{}).Elem(),
		"app_mention":                     reflect.TypeOf(&AppMention{}).Elem(),
		"app_rate_limited":                reflect.TypeOf(&AppRateLimited{}).Elem(),
		"app_requested":                   reflect.TypeOf(&AppRequested{}).Elem(),
		"app_uninstalled":                 reflect.TypeOf(&AppUninstalled{}).Elem(),
		"bot_added":                       reflect.TypeOf(&BotAdded{}).Elem(),
		"bot_changed":                     reflect.TypeOf(&BotChanged{}).Elem(),
		"call_rejected":                   reflect.TypeOf(&CallRejected{}).Elem(),
		"channel_archive":                 reflect.TypeOf(&ChannelArchived{}).Elem(),
		"channel_created":                 reflect.TypeOf(&ChannelCreated{}).Elem(),
		"channel_deleted":                 reflect.TypeOf(&ChannelDeleted{}).Elem(),
		"channel_history_changed":         reflect.TypeOf(&ChannelHistoryChanged{}).Elem(),
		"channel_joined":                  reflect.TypeOf(&ChannelJoined{}).Elem(),
		"channel_left":                    reflect.TypeOf(&ChannelLeft{}).Elem(),
		"channel_marked":                  reflect.TypeOf(&ChannelMarked{}).Elem(),
		"channel_rename":                  reflect.TypeOf(&ChannelRenamed{}).Elem(),
		"channel_shared":                  reflect.TypeOf(&ChannelShared{}).Elem(),
		"channel_unarchive":               reflect.TypeOf(&ChannelUnarchived{}).Elem(),
		"channel_unshared":                reflect.TypeOf(&ChannelUnshared{}).Elem(),
		"commands_changed":                reflect.TypeOf(&CommandsChanged{}).Elem(),
		"dnd_updated":                     reflect.TypeOf(&DNDUpdated{}).Elem(),
		"dnd_updated_user":                reflect.TypeOf(&DNDUpdatedUser{}).Elem(),
		"email_domain_changed":            reflect.TypeOf(&EmailDomainChanged{}).Elem(),
		"emoji_changed":                   reflect.TypeOf(&EmojiChanged{}).Elem(),
		"external_org_migration_finished": reflect.TypeOf(&ExternalOrgMigrationFinished{}).Elem(),
		"external_org_migration_started":  reflect.TypeOf(&ExternalOrgMigrationStarted{}).Elem(),
		"file_change":                     reflect.TypeOf(&FileChanged{}).Elem(),
		"file_comment_added":              reflect.TypeOf(&FileCommentAdded{}).Elem(),
		"file_comment_deleted":            reflect.TypeOf(&FileCommentDeleted{}).Elem(),
		"file_comment_edited":             reflect.TypeOf(&FileCommentEdited{}).Elem(),
		"file_created":                    reflect.TypeOf(&FileCreated{}).Elem(),
		"file_deleted":                    reflect.TypeOf(&FileDeleted{}).Elem(),
		"file_public":                     reflect.TypeOf(&FilePublished{}).Elem(),
		"file_shared":                     reflect.TypeOf(&FileShared{}).Elem(),
		"file_unshared":                   reflect.TypeOf(&FileUnshared{}).Elem(),
		"goodbye":                         reflect.TypeOf(&GoodBye{}).Elem(),
		"grid_migration_finished":         reflect.TypeOf(&GridMigrationFinished{}).Elem(),
		"grid_migration_started":          reflect.TypeOf(&GridMigrationStarted{}).Elem(),
		"group_archive":                   reflect.TypeOf(&GroupArchived{}).Elem(),
		"group_close":                     reflect.TypeOf(&GroupClosed{}).Elem(),
		"group_deleted":                   reflect.TypeOf(&GroupDeleted{}).Elem(),
		"group_history_changed":           reflect.TypeOf(&GroupHistoryChanged{}).Elem(),
		"group_joined":                    reflect.TypeOf(&GroupJoined{}).Elem(),
		"group_left":                      reflect.TypeOf(&GroupLeft{}).Elem(),
		"group_marked":                    reflect.TypeOf(&GroupMarked{}).Elem(),
		"group_open":                      reflect.TypeOf(&GroupOpened{}).Elem(),
		"group_rename":                    reflect.TypeOf(&GroupRenamed{}).Elem(),
		"group_unarchive":                 reflect.TypeOf(&GroupUnarchived{}).Elem(),
		"hello":                           reflect.TypeOf(&Hello{}).Elem(),
		"im_close":                        reflect.TypeOf(&IMClosed{}).Elem(),
		"im_created":                      reflect.TypeOf(&IMCreated{}).Elem(),
		"im_history_changed":              reflect.TypeOf(&IMHistoryChanged{}).Elem(),
		"im_marked":                       reflect.TypeOf(&IMMarked{}).Elem(),
		"im_open":                         reflect.TypeOf(&IMOpened{}).Elem(),
		"invite_requested":                reflect.TypeOf(&InviteRequested{}).Elem(),
		"link_shared":                     reflect.TypeOf(&LinkShared{}).Elem(),
		"manual_presence_change":          reflect.TypeOf(&PresenceManuallyChanged{}).Elem(),
		"member_joined_channel":           reflect.TypeOf(&MemberJoinedChannel{}).Elem(),
		"member_left_channel":             reflect.TypeOf(&MemberLeftChannel{}).Elem(),
		"pin_added":                       reflect.TypeOf(&PinAdded{}).Elem(),
		"pin_removed":                     reflect.TypeOf(&PinRemoved{}).Elem(),
		"pref_change":                     reflect.TypeOf(&PreferenceChanged{}).Elem(),
		"presence_change":                 reflect.TypeOf(&PresenceChanged{}).Elem(),
		"presence_query":                  reflect.TypeOf(&PresenceQuery{}).Elem(),
		"presence_sub":                    reflect.TypeOf(&PresenceSubscribe{}).Elem(),
		"reaction_added":                  reflect.TypeOf(&ReactionAdded{}).Elem(),
		"reaction_removed":                reflect.TypeOf(&ReactionRemoved{}).Elem(),
		"reconnect_url":                   reflect.TypeOf(&ReconnectURL{}).Elem(),
		"resources_added":                 reflect.TypeOf(&ResourcesAdded{}).Elem(),
		"resources_removed":               reflect.TypeOf(&ResourcesRemoved{}).Elem(),
		"scope_denied":                    reflect.TypeOf(&ScopeDenied{}).Elem(),
		"scope_granted":                   reflect.TypeOf(&ScopeGranted{}).Elem(),
		"star_added":                      reflect.TypeOf(&StarAdded{}).Elem(),
		"star_removed":                    reflect.TypeOf(&StarRemoved{}).Elem(),
		"subteam_created":                 reflect.TypeOf(&SubTeamCreated{}).Elem(),
		"subteam_members_changed":         reflect.TypeOf(&SubTeamMembersChanged{}).Elem(),
		"subteam_self_added":              reflect.TypeOf(&SubTeamSelfAdded{}).Elem(),
		"subteam_self_removed":            reflect.TypeOf(&SubTeamSelfRemoved{}).Elem(),
		"subteam_updated":                 reflect.TypeOf(&SubTeamUpdated{}).Elem(),
		"team_domain_change":              reflect.TypeOf(&TeamDomainChanged{}).Elem(),
		"team_join":                       reflect.TypeOf(&TeamJoined{}).Elem(),
		"team_migration_started":          reflect.TypeOf(&TeamMigrationStarted{}).Elem(),
		"team_plan_change":                reflect.TypeOf(&TeamPlanChanged{}).Elem(),
		"team_pref_change":                reflect.TypeOf(&TeamPreferenceChanged{}).Elem(),
		"team_profile_change":             reflect.TypeOf(&TeamProfileChanged{}).Elem(),
		"team_profile_delete":             reflect.TypeOf(&TeamProfileDeleted{}).Elem(),
		"team_profile_reorder":            reflect.TypeOf(&TeamProfileReordered{}).Elem(),
		"team_rename":                     reflect.TypeOf(&TeamRenamed{}).Elem(),
		"tokens_revoked":                  reflect.TypeOf(&TokensRevoked{}).Elem(),
		"user_change":                     reflect.TypeOf(&UserChanged{}).Elem(),
		"user_resource_denied":            reflect.TypeOf(&UserResourceDenied{}).Elem(),
		"user_resource_granted":           reflect.TypeOf(&UserResourceGranted{}).Elem(),
		"user_resource_removed":           reflect.TypeOf(&UserResourceRemoved{}).Elem(),
		"user_typing":                     reflect.TypeOf(&UserTyping{}).Elem(),
		"message":                         reflect.TypeOf(&Message{}).Elem(),
		"message.app_home":                reflect.TypeOf(&MessageAppHome{}).Elem(),
	}
	subTypeMap = map[string]reflect.Type{
		"bot_message":       reflect.TypeOf(&MiscMessage{}).Elem(),
		"channel_archive":   reflect.TypeOf(&MiscMessage{}).Elem(),
		"channel_join":      reflect.TypeOf(&MiscMessage{}).Elem(),
		"channel_leave":     reflect.TypeOf(&MiscMessage{}).Elem(),
		"channel_name":      reflect.TypeOf(&MiscMessage{}).Elem(),
		"channel_purpose":   reflect.TypeOf(&MiscMessage{}).Elem(),
		"channel_topic":     reflect.TypeOf(&MiscMessage{}).Elem(),
		"channel_unarchive": reflect.TypeOf(&MiscMessage{}).Elem(),
		"file_comment":      reflect.TypeOf(&MiscMessage{}).Elem(),
		"file_mention":      reflect.TypeOf(&MiscMessage{}).Elem(),
		"file_share":        reflect.TypeOf(&MiscMessage{}).Elem(),
		"group_archive":     reflect.TypeOf(&MiscMessage{}).Elem(),
		"group_join":        reflect.TypeOf(&MiscMessage{}).Elem(),
		"group_leave":       reflect.TypeOf(&MiscMessage{}).Elem(),
		"group_name":        reflect.TypeOf(&MiscMessage{}).Elem(),
		"group_purpose":     reflect.TypeOf(&MiscMessage{}).Elem(),
		"group_topic":       reflect.TypeOf(&MiscMessage{}).Elem(),
		"group_unarchive":   reflect.TypeOf(&MiscMessage{}).Elem(),
		"me_message":        reflect.TypeOf(&MiscMessage{}).Elem(),
		"message_changed":   reflect.TypeOf(&MiscMessage{}).Elem(),
		"message_deleted":   reflect.TypeOf(&MiscMessage{}).Elem(),
		"pinned_item":       reflect.TypeOf(&MiscMessage{}).Elem(),
		"unpinned_item":     reflect.TypeOf(&MiscMessage{}).Elem(),
	}
	messageChannelTypeMap = map[string]reflect.Type{
		"app_home": reflect.TypeOf(&MessageAppHome{}).Elem(),
		"channel":  reflect.TypeOf(&MessageChannels{}).Elem(),
		"group":    reflect.TypeOf(&MessageGroups{}).Elem(),
		"im":       reflect.TypeOf(&MessageIM{}).Elem(),
		"mpim":     reflect.TypeOf(&MessageMPIM{}).Elem(),
	}
)
